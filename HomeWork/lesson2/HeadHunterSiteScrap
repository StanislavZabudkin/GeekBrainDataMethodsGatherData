#https://hh.ru/search/vacancy?only_with_salary=false&clusters=true&enable_snippets=true&salary=&st=searchVacancy&text=java
import requests
import re
from bs4 import BeautifulSoup as bs
from pprint import pprint
import lxml

headers = requests.utils.default_headers()
headers.update(
    {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.92 YaBrowser/19.10.1.168 (beta) Yowser/2.5 Safari/537.36'
    }
)

search_word = 'java'
main_link = ('https://www.hh.ru/search/vacancy')
only_with_salary = 'false'
clusters = 'true'
enable_snippets='true'
st = 'searchVacancy'
html = requests.get(f'{main_link}?only_with_salary={only_with_salary}&clusters={clusters}&enable_snippets={enable_snippets}&salary=&st={st}&text={search_word}', headers=headers).text
#print(html)

#req = requests.get(f'{main_link}?q={city}&appid={appid}')

#print(html)

parsed_html = bs(html,'lxml')

nonBreakSpace = u'\xa0'

#print(parsed_html)

vacancy_block = parsed_html.find('div',{'class':'vacancy-serp'}) #vacancy-serp__vacancy vacancy-serp__vacancy_premium

resultData = []

#pprint(films_block)
vacancy_list = vacancy_block.findChildren(recursive=False)
#pprint(vacancy_list)
for vac in vacancy_list:
    recData = {}
    recData['site'] = 'hh'

#    print(vac)
#    vac.find('a',{'data-qa':'vacancy-serp__vacancy-title'}).findChild()
    if vac.find('a',{'data-qa':'vacancy-serp__vacancy-title'}) != None:
        pprint(vac.find('span',{'class':'g-user-content'}).findChild().text)
        recData['NamePosition'] = vac.find('span',{'class':'g-user-content'}).findChild().text
        pprint(vac.find('span',{'class':'g-user-content'}).find('a',{'class':'bloko-link HH-LinkModifier'})['href'])
        recData['href'] = vac.find('span',{'class':'g-user-content'}).find('a',{'class':'bloko-link HH-LinkModifier'})['href']


    varPrice = vac.find('div',{'class':'vacancy-serp-item__sidebar'})
    min_oklad = 0
    max_oklad = 0

    recData['min_oklad'] = min_oklad
    recData['max_oklad'] = max_oklad


    if varPrice != None and varPrice.findChild() != None:
        pprint(varPrice.findChild().text)
        vtxt = varPrice.findChild().text
        vtxt = vtxt.replace(nonBreakSpace,'')
 #       print(vtxt[:2])
        if vtxt[:2] == 'от':
            vtxt = vtxt[3:]
            min_oklad = int(re.sub("[^0-9]", "", vtxt))
            recData['min_oklad'] = min_oklad

        else:
            pos_ = vtxt.find('-')
            min_oklad = int(re.sub("[^0-9]", "", vtxt[:pos_]))
            max_oklad = int(re.sub("[^0-9]", "", vtxt[pos_:]))
            recData['min_oklad'] = min_oklad
            recData['max_oklad'] = max_oklad
#        varPriceTxt =  re.sub("[^0-9]", "", "sdkjh987978asd098as0980a98sd")
#      pprint(" --- " +  vtxt+ " " + str(min_oklad) + " " + str(max_oklad))
    resultData.append(recData)

pprint(resultData)




# only_with_salary=false&clusters=true&enable_snippets=true&salary=&st=searchVacancy&text=java

#films_list = films_block.findChildren(recursive=False)

#films = []
#for film in films_list:
#    film_data={}
#    main_info = film.find('div',{'class':'name'}).findChild()
#    film_name = main_info.getText()
#    film_link = main_link+main_info['href']
#    genre = film.find_all('div',{'class':'gray'})[1].getText().replace(' ','')[9:]
#    rating = film.find('span',{'class':['rating_ball_green','rating_ball_grey','rating_ball_red']})
#    if not rating:
#        rating=0
#    else:
#        rating = rating.getText()
#    film_data['name'] = film_name
#    film_data['genre'] = genre
#    film_data['link'] = film_link
#    film_data['raing'] = rating
#    films.append(film_data)

#pprint(films)
